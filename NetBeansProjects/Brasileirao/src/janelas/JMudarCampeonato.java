/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package janelas;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import textFilesApps.*;
import textFilesApps.ReadTextFile;
import time.Time;

/**
 *
 * @author Tata_
 */
public class JMudarCampeonato extends javax.swing.JFrame {

    private ArrayList<Time> timesDisponiveis;
    private ArrayList<Time> timesNoCampeonato;
    private ReadTextFile read;
    private CreateTextFile create;
    private JTabela jTabela;

    public JMudarCampeonato() throws IOException, FileNotFoundException, ClassNotFoundException {
        timesDisponiveis = new ArrayList<>();
        timesNoCampeonato = new ArrayList<>();
        read = new ReadTextFile();
        create = new CreateTextFile();
        puxarTimesDoCampeonato();
        puxarTimesDisponiveis();

        initComponents();

        mudarTabelas();
    }

    public JTabela getjTabela() {
        return jTabela;
    }

    public void setjTabela(JTabela jTabela) {
        this.jTabela = jTabela;
    }

    private void puxarTimesDoCampeonato() throws IOException, FileNotFoundException, ClassNotFoundException {
        timesNoCampeonato = read.buscarTime();
    }

    private void puxarTimesDisponiveis() throws IOException, FileNotFoundException, ClassNotFoundException {
        timesDisponiveis = read.buscarTimesCriados();
    }

    private void salvarNovoCampeonato() throws IOException {
        create.gravar(timesNoCampeonato);
        create.gravarTimesCriados(timesDisponiveis);
        JOptionPane.showMessageDialog(this, "Times alterados com sucesso");
        jTabela.simulacaoNova();
        this.dispose();
    }

    public void mudarTabelas() {
        DefaultListModel model = new DefaultListModel();
        DefaultListModel model2 = new DefaultListModel();

        for (Time time : timesDisponiveis) {
            model.addElement(time.getNome());
        }
        listaTimesDisp.setModel(model);

        for (Time time : timesNoCampeonato) {
            model2.addElement(time.getNome());
        }
        listaTimesCamp.setModel(model2);
        if (listaTimesCamp.isSelectionEmpty() && listaTimesDisp.isSelectionEmpty()) {
            listaTimesCamp.setSelectedIndex(0);
            Time timeAux = null;
            String estrelas = "";

            for (Time time : timesNoCampeonato) {
                if (time.getNome().equals(listaTimesCamp.getSelectedValue())) {
                    timeAux = time;
                }
            }
            nomeTime.setText(timeAux.getNome());
            siglaTime.setText(timeAux.getSigla());
            estadioTime.setText(timeAux.getEstagio());
            for (int i = 0; i < timeAux.getRanking(); i++) {
                estrelas = estrelas.concat("✦");
            }
            rankingTime.setText(estrelas);
            icone.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logos/" + timeAux.getLogo() + ".png")));
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaTimesDisp = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        listaTimesCamp = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        nomeTime = new javax.swing.JLabel();
        siglaTime = new javax.swing.JLabel();
        estadioTime = new javax.swing.JLabel();
        rankingTime = new javax.swing.JLabel();
        icone = new javax.swing.JLabel();
        addTime = new javax.swing.JButton();
        removerTime = new javax.swing.JButton();
        confirmar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Mudar Times"));

        listaTimesDisp.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Nome do Time 1", "Nome do Time 1", "Nome do Time 1", "Nome do Time 1", "Nome do Time 1", "Nome do Time 1", "Nome do Time 1", "Nome do Time 1", "Nome do Time 1", "Nome do Time 1", "Nome do Time 1", "Nome do Time 1", "Nome do Time 1", "Nome do Time 1", "Nome do Time 1", "Nome do Time 1", "Nome do Time 1", "Nome do Time 1", "Nome do Time 1", "Nome do Time 1" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        listaTimesDisp.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listaTimesDisp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listaTimesDispMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(listaTimesDisp);

        listaTimesCamp.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Nome do Time 1", "Nome do Time 1", "Nome do Time 1", "Nome do Time 1", "Nome do Time 1", "Nome do Time 1", "Nome do Time 1", "Nome do Time 1", "Nome do Time 1", "Nome do Time 1", "Nome do Time 1", "Nome do Time 1", "Nome do Time 1", "Nome do Time 1", "Nome do Time 1", "Nome do Time 1", "Nome do Time 1", "Nome do Time 1", "Nome do Time 1", "Nome do Time 1" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        listaTimesCamp.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listaTimesCamp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listaTimesCampMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(listaTimesCamp);

        jLabel1.setText("Nome:");

        jLabel2.setText("Sigla:");

        jLabel3.setText("Estádio:");

        jLabel4.setText("Ranking:");

        nomeTime.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        nomeTime.setText("    ");

        siglaTime.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        siglaTime.setText("    ");

        estadioTime.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        estadioTime.setText("   ");

        rankingTime.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        rankingTime.setText("    ");

        icone.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logos/fc_barcelona_footballteam_18015.png"))); // NOI18N

        addTime.setText(">>");
        addTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTimeActionPerformed(evt);
            }
        });

        removerTime.setText("<<");
        removerTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerTimeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addTime)
                            .addComponent(removerTime))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(nomeTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(siglaTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(estadioTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(rankingTime, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(icone)))
                .addGap(59, 59, 59))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(nomeTime))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(siglaTime))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(estadioTime))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(rankingTime)))
                    .addComponent(icone))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(121, 121, 121)
                        .addComponent(addTime)
                        .addGap(18, 18, 18)
                        .addComponent(removerTime)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        confirmar.setText("Confirmar");
        confirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(221, 221, 221)
                        .addComponent(confirmar)))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(confirmar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void listaTimesDispMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listaTimesDispMouseClicked
        if (!listaTimesDisp.isSelectionEmpty()) {
            Time timeAux = null;
            String estrelas = "";
            if (!listaTimesDisp.isSelectionEmpty()) {
                for (Time time : timesDisponiveis) {
                    if (time.getNome().equals(listaTimesDisp.getSelectedValue())) {
                        timeAux = time;
                    }
                }
            }
            nomeTime.setText(timeAux.getNome());
            siglaTime.setText(timeAux.getSigla());
            estadioTime.setText(timeAux.getEstagio());
            for (int i = 0; i < timeAux.getRanking(); i++) {
                estrelas = estrelas.concat("✦");
            }
            rankingTime.setText(estrelas);
            icone.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logos/" + timeAux.getLogo() + ".png")));
        }

    }//GEN-LAST:event_listaTimesDispMouseClicked

    private void addTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTimeActionPerformed
        Time timeAux = null;
        if (!listaTimesDisp.isSelectionEmpty()) {
            for (Time time : timesDisponiveis) {
                if (time.getNome().equals(listaTimesDisp.getSelectedValue())) {
                    timeAux = time;
                }
            }
        }
        timesDisponiveis.remove(timeAux);
        timesNoCampeonato.add(timeAux);
        mudarTabelas();
    }//GEN-LAST:event_addTimeActionPerformed

    private void removerTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removerTimeActionPerformed
        Time timeAux = null;
        if (!listaTimesCamp.isSelectionEmpty()) {
            for (Time time : timesNoCampeonato) {
                if (time.getNome().equals(listaTimesCamp.getSelectedValue())) {
                    timeAux = time;
                }
            }
        }
        timesDisponiveis.add(timeAux);
        timesNoCampeonato.remove(timeAux);
        mudarTabelas();
    }//GEN-LAST:event_removerTimeActionPerformed

    private void listaTimesCampMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listaTimesCampMouseClicked
        if (!listaTimesCamp.isSelectionEmpty()) {
            Time timeAux = null;
            String estrelas = "";
            if (!listaTimesCamp.isSelectionEmpty()) {
                for (Time time : timesNoCampeonato) {
                    if (time.getNome().equals(listaTimesCamp.getSelectedValue())) {
                        timeAux = time;
                    }
                }
            }
            nomeTime.setText(timeAux.getNome());
            siglaTime.setText(timeAux.getSigla());
            estadioTime.setText(timeAux.getEstagio());
            for (int i = 0; i < timeAux.getRanking(); i++) {
                estrelas = estrelas.concat("✦");
            }
            rankingTime.setText(estrelas);
            icone.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logos/" + timeAux.getLogo() + ".png")));
        }

    }//GEN-LAST:event_listaTimesCampMouseClicked

    private void confirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmarActionPerformed
        if (timesNoCampeonato.size() != 20) {
            JOptionPane.showMessageDialog(this, "O campeonato precisa ter 20 times");
        } else {
            try {
                salvarNovoCampeonato();
            } catch (IOException ex) {
                Logger.getLogger(JMudarCampeonato.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_confirmarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JMudarCampeonato.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JMudarCampeonato.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JMudarCampeonato.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JMudarCampeonato.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new JMudarCampeonato().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(JMudarCampeonato.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(JMudarCampeonato.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addTime;
    private javax.swing.JButton confirmar;
    private javax.swing.JLabel estadioTime;
    private javax.swing.JLabel icone;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> listaTimesCamp;
    private javax.swing.JList<String> listaTimesDisp;
    private javax.swing.JLabel nomeTime;
    private javax.swing.JLabel rankingTime;
    private javax.swing.JButton removerTime;
    private javax.swing.JLabel siglaTime;
    // End of variables declaration//GEN-END:variables
}
